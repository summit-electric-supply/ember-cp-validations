{
    "project": {
        "name": "Ember CP Validations",
        "description": "Ember computed property based validations",
        "url": "https://github.com/summit-electric-supply/ember-cp-validations",
        "indexModule": "Usage",
        "externalDocs": [
            {
                "name": "@summit-electric-supply/ember-validators",
                "path": "node_modules/@summit-electric-supply/ember-validators",
                "url": "https://github.com/summit-electric-supply/ember-validators",
                "version": "master"
            }
        ],
        "version": "v4.1.0-beta.1"
    },
    "files": {
        "addon/-private/result.js": {
            "name": "addon/-private/result.js",
            "modules": {},
            "classes": {
                "Result": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/helpers/v-get.js": {
            "name": "addon/helpers/v-get.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/cycle-breaker.js": {
            "name": "addon/utils/cycle-breaker.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/deep-set.js": {
            "name": "addon/utils/deep-set.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/lookup-validator.js": {
            "name": "addon/utils/lookup-validator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/should-call-super.js": {
            "name": "addon/utils/should-call-super.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validations/error.js": {
            "name": "addon/validations/error.js",
            "modules": {},
            "classes": {
                "Error": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validations/factory.js": {
            "name": "addon/validations/factory.js",
            "modules": {
                "Validations": 1,
                "Accessing Validations": 1
            },
            "classes": {
                "Factory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validations/result-collection.js": {
            "name": "addon/validations/result-collection.js",
            "modules": {},
            "classes": {
                "ResultCollection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validations/validator.js": {
            "name": "addon/validations/validator.js",
            "modules": {
                "Validators": 1,
                "Common Options": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/alias.js": {
            "name": "addon/validators/alias.js",
            "modules": {},
            "classes": {
                "Alias": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/base.js": {
            "name": "addon/validators/base.js",
            "modules": {},
            "classes": {
                "Base": 1,
                "Custom": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/belongs-to.js": {
            "name": "addon/validators/belongs-to.js",
            "modules": {},
            "classes": {
                "Belongs To": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/collection.js": {
            "name": "addon/validators/collection.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/confirmation.js": {
            "name": "addon/validators/confirmation.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/date.js": {
            "name": "addon/validators/date.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/dependent.js": {
            "name": "addon/validators/dependent.js",
            "modules": {},
            "classes": {
                "Dependent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/ds-error.js": {
            "name": "addon/validators/ds-error.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/exclusion.js": {
            "name": "addon/validators/exclusion.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/format.js": {
            "name": "addon/validators/format.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/has-many.js": {
            "name": "addon/validators/has-many.js",
            "modules": {},
            "classes": {
                "Has Many": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/inclusion.js": {
            "name": "addon/validators/inclusion.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/inline.js": {
            "name": "addon/validators/inline.js",
            "modules": {},
            "classes": {
                "Inline": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/length.js": {
            "name": "addon/validators/length.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/messages.js": {
            "name": "addon/validators/messages.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/number.js": {
            "name": "addon/validators/number.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/validators/presence.js": {
            "name": "addon/validators/presence.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/index.js": {
            "name": "addon/index.js",
            "modules": {
                "Usage": 1,
                "Basic": 1,
                "Advanced": 1,
                "I18n Solutions": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@summit-electric-supply/ember-validators/addon/utils/can-invoke.js": {
            "name": "node_modules/@summit-electric-supply/ember-validators/addon/utils/can-invoke.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "node_modules/@summit-electric-supply/ember-validators/addon/collection.js": {
            "name": "node_modules/@summit-electric-supply/ember-validators/addon/collection.js",
            "modules": {},
            "classes": {
                "Collection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@summit-electric-supply/ember-validators/addon/confirmation.js": {
            "name": "node_modules/@summit-electric-supply/ember-validators/addon/confirmation.js",
            "modules": {},
            "classes": {
                "Confirmation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@summit-electric-supply/ember-validators/addon/date.js": {
            "name": "node_modules/@summit-electric-supply/ember-validators/addon/date.js",
            "modules": {},
            "classes": {
                "Date": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@summit-electric-supply/ember-validators/addon/ds-error.js": {
            "name": "node_modules/@summit-electric-supply/ember-validators/addon/ds-error.js",
            "modules": {},
            "classes": {
                "DS Error": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@summit-electric-supply/ember-validators/addon/exclusion.js": {
            "name": "node_modules/@summit-electric-supply/ember-validators/addon/exclusion.js",
            "modules": {},
            "classes": {
                "Exclusion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@summit-electric-supply/ember-validators/addon/format.js": {
            "name": "node_modules/@summit-electric-supply/ember-validators/addon/format.js",
            "modules": {},
            "classes": {
                "Format": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@summit-electric-supply/ember-validators/addon/inclusion.js": {
            "name": "node_modules/@summit-electric-supply/ember-validators/addon/inclusion.js",
            "modules": {},
            "classes": {
                "Inclusion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@summit-electric-supply/ember-validators/addon/length.js": {
            "name": "node_modules/@summit-electric-supply/ember-validators/addon/length.js",
            "modules": {},
            "classes": {
                "Length": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@summit-electric-supply/ember-validators/addon/messages.js": {
            "name": "node_modules/@summit-electric-supply/ember-validators/addon/messages.js",
            "modules": {},
            "classes": {
                "Messages": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@summit-electric-supply/ember-validators/addon/number.js": {
            "name": "node_modules/@summit-electric-supply/ember-validators/addon/number.js",
            "modules": {},
            "classes": {
                "Number": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@summit-electric-supply/ember-validators/addon/presence.js": {
            "name": "node_modules/@summit-electric-supply/ember-validators/addon/presence.js",
            "modules": {},
            "classes": {
                "Presence": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Validations": {
            "name": "Validations",
            "submodules": {
                "Accessing Validations": 1
            },
            "elements": {},
            "classes": {
                "Result": 1,
                "Error": 1,
                "Factory": 1,
                "ResultCollection": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "addon/validations/result-collection.js",
            "line": 31,
            "description": "## Running Manual Validations\n\nAlthough validations are lazily computed, there are times where we might want to force all or\nspecific validations to happen. For this reason we have exposed three methods:\n\n- {{#crossLink \"Factory/validate:method\"}}{{/crossLink}}: Will always return a promise and should be used if asynchronous validations are present\n- {{#crossLink \"Factory/validateSync:method\"}}{{/crossLink}}: Should only be used if all validations are synchronous. It will throw an error if any of the validations are asynchronous\n- {{#crossLink \"Factory/validateAttribute:method\"}}{{/crossLink}}: A functional approach to validating an attribute without changing its state",
            "access": "private",
            "tagname": "",
            "itemtype": "main"
        },
        "Accessing Validations": {
            "name": "Accessing Validations",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Validations",
            "namespace": "",
            "file": "addon/validations/factory.js",
            "line": 51,
            "description": "All validations can be accessed via the `validations` object created on your model/object.\nEach attribute also has its own validation which has the same properties.\nAn attribute validation can be accessed via `validations.attrs.<ATTRIBUTE>` which will return a {{#crossLink \"ResultCollection\"}}{{/crossLink}}.\n\n### Global Validations\n\nGlobal validations exist on the `validations` object that resides on the object that is being validated.\nTo see all possible properties, please checkout the docs for {{#crossLink \"ResultCollection\"}}{{/crossLink}}.\n\n```js\nmodel.get('validations.isValid');\nmodel.get('validations.errors');\nmodel.get('validations.messages');\n// etc...\n```\n\n### Attribute Validations\n\nThe `validations` object also contains an `attrs` object which holds a {{#crossLink \"ResultCollection\"}}{{/crossLink}}\nfor each attribute specified in your validation rules.\n\n```js\nmodel.get('validations.attrs.username.isValid');\nmodel.get('validations.attrs.password.errors');\nmodel.get('validations.attrs.email.messages');\n// etc...\n```"
        },
        "Validators": {
            "name": "Validators",
            "submodules": {
                "undefined": 1,
                "Common Options": 1
            },
            "elements": {},
            "classes": {
                "Collection": 1,
                "Alias": 1,
                "Base": 1,
                "Custom": 1,
                "Belongs To": 1,
                "Confirmation": 1,
                "Date": 1,
                "Dependent": 1,
                "DS Error": 1,
                "Exclusion": 1,
                "Format": 1,
                "Has Many": 1,
                "Inclusion": 1,
                "Inline": 1,
                "Length": 1,
                "Messages": 1,
                "Number": 1,
                "Presence": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/presence.js",
            "line": 7,
            "itemtype": "main"
        },
        "Common Options": {
            "name": "Common Options",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Validators",
            "namespace": "",
            "file": "addon/validations/validator.js",
            "line": 9,
            "description": "### description\n\nDefault: __'This field'__\n\nA descriptor for your attribute used in the error message strings.\nYou can overwrite this value in your `validators/messages.js` file by changing the `defaultDescription` property.\n\n```javascript\n// Examples\nvalidator('date', {\n  description: 'Date of birth'\n})\n// If validation is run and the attribute is empty, the error returned will be:\n// 'Date of birth can't be blank'\n```\n\n### lazy\n\nDefault: __true__\n\nOnly validate the given validator if the attribute is not already in an invalid\nstate. When you have multiple validators on an attribute, it will only validate subsequent\nvalidators if the preceding validators have passed. When set to __false__, the validator\nwill always be executed, even if its preceding validators are invalid.\n\n```javascript\n// Examples\nbuildValidations({\n username: [\n   validator('presence', true),\n   validator('length', { min: 5 }),\n   validator('custom-promise-based-validator') // Will only be executed if the above two have passed\n ]\n});\n\nvalidator('custom-validator-that-must-executed', {\n  lazy: false\n})\n```\n\n### dependentKeys\n\nA list of other model specific dependents for you validator.\n\n```javascript\n// Examples\nvalidator('has-friends', {\n  dependentKeys: ['model.friends.[]']\n})\nvalidator('has-valid-friends', {\n  dependentKeys: ['model.friends.@each.username']\n})\nvalidator('x-validator', {\n  dependentKeys: ['model.username', 'model.email', 'model.meta.foo.bar']\n})\n```\n\n### disabled\n\nDefault: __false__\n\nIf set to __true__, disables the given validator.\n\n```js\n// Examples\nvalidator('presence', {\n  presence: true,\n  disabled: true\n})\nvalidator('presence', {\n  presence: true,\n  disabled: computed.not('model.shouldValidate')\n})\n```\n\n### debounce\n\nDefault: __0__\n\nDebounces the validation with the given time in `milliseconds`. All debounced validations will\nbe handled asynchronously (wrapped in a promise).\n\n```javascript\n// Examples\nvalidator('length', {\n  debounce: 500\n})\nvalidator('x-validator', {\n  debounce: 250\n})\n```\n\n### isWarning\n\nDefault: __false__\n\nAny validator can be declared as a warning validator by setting `isWarning` to true. These validators will act as\nassertions that when return a message, will be placed under `warnings` and `warningMessages` collections. What this means,\nis that these validators will not have any affect on the valid state of the attribute allowing you to display warning messages\neven when the attribute is valid.\n\n```javascript\n// Examples\nvalidator('length', {\n  isWarning: true,\n  min: 6,\n  message: 'Password is weak'\n})\n```\n\n### volatile\n\nDefault: __false__\n\nIf any validator sets the volatile option to **true** (including options, default options, and global options),\nit will place the entire attribute's CP in a volatile state. This means that it will set it into non-cached mode.\nWhen in this mode the computed property will not automatically cache the return value.\n\nDependency keys have no effect on volatile properties as they are for cache invalidation and notification when\ncached value is invalidated. Any changes to the dependents will not refire validations.\n\n__**WARNING: This option should only be used if you know what you're doing**__\n\n```javascript\n// Examples\nvalidator('length', {\n  volatile: true\n})\n```\n\n### value\n\nUsed to retrieve the value to validate. This will overwrite the validator's default `value` method.\nBy default this returns `model[attribute]`. If you are dependent on other model attributes, you will\nneed to add them as `dependentKeys`.\n\n```javascript\n// Examples\nvalidator('date', {\n  value(model, attribute) {\n  \t// Format the original value before passing it into the validator\n  \treturn moment().utc(model.get(attribute)).format('DD/MM/YYY');\n  }\n})\nvalidator('number', {\n  dependentKeys: ['someOtherAttr'],\n  value(model, attribute) {\n   // Validate a value that is not the current attribute\n   return this.get('model').get('someOtherAttr');\n  }\n})\n```\n\n### message\n\nThis option can take two forms. It can either be a `string` (a CP that returns a string is also valid), or a `function`.\nIf a string is used, then it will overwrite all error message types for the specified validator.\n\n```javascript\n// Example: String\nvalidator('confirmation', {\n  message: 'Email does not match {attribute}. What are you even thinking?!'\n})\n```\n\nWe can pass a `function` into our message option for even more customization capabilities.\n\n```javascript\n// Example: Function\nvalidator('date', {\n  message(type, options, value, context) {\n    if (type === 'before') {\n      return '{description} should really be before {date}';\n    }\n    if (type === 'after') {\n      return '{description} should really be after {date}';\n    }\n  }\n})\n```\nThe message function is given the following arguments:\n\n- `type` (**String**): The error message type\n- `options` (**Object**): The validator options that were defined in the model\n- `value`: The current value being evaluated\n- `context` (**Object**): Context for string replacement\n\nThe return value must be a `string`. If nothing is returned (`undefined`),\ndefaults to the default error message of the specified type.\n\nWithin this function, the context is set to that of the current validator.\nThis gives you access to the model, defaultMessages, options and more."
        },
        "Usage": {
            "name": "Usage",
            "submodules": {
                "Basic": 1,
                "Advanced": 1,
                "I18n Solutions": 1
            },
            "elements": {},
            "classes": {
                "Ember": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "addon/index.js",
            "line": 4,
            "description": "## Installation\n```shell\nember install ember-cp-validations\n```\n\n## Changelog\nChangelog can be found [here](https://github.com/offirgolan/ember-cp-validations/blob/master/CHANGELOG.md)\n\n## Live Demo\nA live demo can be found [here](http://offirgolan.github.io/ember-cp-validations/)\n\n## Looking for help?\nIf it is a bug [please open an issue on GitHub](http://github.com/offirgolan/ember-cp-validations/issues)."
        },
        "Basic": {
            "name": "Basic",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Usage",
            "namespace": "",
            "file": "addon/index.js",
            "line": 22,
            "description": "## Models\n\nThe first thing we need to do is build our validation rules. This will then generate a Mixin that you will be able to incorporate into your model or object.\n\n```javascript\n// models/user.js\n\nimport Ember from 'ember';\nimport DS from 'ember-data';\nimport { validator, buildValidations } from '@summit-electric-supply/ember-cp-validations';\n\nconst Validations = buildValidations({\n  username: validator('presence', true),\n  password: [\n    validator('presence', true),\n    validator('length', {\n      min: 4,\n      max: 8\n    })\n  ],\n  email: [\n    validator('presence', true),\n    validator('format', { type: 'email' })\n  ],\n  emailConfirmation: [\n    validator('presence', true),\n    validator('confirmation', {\n      on: 'email',\n      message: '{description} do not match',\n      description: 'Email addresses'\n    })\n  ]\n});\n```\n\nOnce our rules are created and our Mixin is generated, all we have to do is add it to our model.\n\n```javascript\n// models/user.js\n\nexport default DS.Model.extend(Validations, {\n  'username': attr('string'),\n  'password': attr('string'),\n  'email': attr('string')\n});\n```\n\n## Objects\n\nYou can also use the generated `Validations` mixin on any `Ember.Object` or child\nof `Ember.Object`, like `Ember.Component`. For example:\n\n```javascript\n// components/x-foo.js\n\nimport Ember from 'ember';\nimport { validator, buildValidations } from '@summit-electric-supply/ember-cp-validations';\n\nconst Validations = buildValidations({\n  bar: validator('presence', true)\n});\n\nexport default Ember.Component.extend(Validations, {\n  bar: null\n});\n```\n\n```javascript\n// models/user.js\n\nexport default Ember.Object.extend(Validations, {\n  username: null\n});\n```\n\n## A Note on Testing & Object Containers\n\nTo lookup validators, container access is required, which can cause an issue with `Ember.Object` creation\nif the object is statically imported. The current fix for this is as follows.\n\n**Ember < 2.3.0**\n\n```javascript\n// routes/index.js\n\nimport User from '../models/user';\n\nexport default Ember.Route.extend({\n  model() {\n    const container = this.get('container');\n    return User.create({ username: 'John', container })\n  }\n});\n```\n\n**Ember >= 2.3.0**\n\n```javascript\n// routes/index.js\n\nimport User from '../models/user';\n\nexport default Ember.Route.extend({\n  model() {\n    return User.create(\n     Ember.getOwner(this).ownerInjection(),\n     { username: 'John' }\n    );\n  }\n});\n```\n\nThis also has ramifications for Ember Data model tests. When using [Ember QUnit's `moduleForModel`](https://github.com/emberjs/ember-qunit#ember-data-tests)\n(or [Ember Mocha's `setupModelTest`](https://github.com/emberjs/ember-mocha#setup-model-tests)), you will need to specify all validators\nthat your model depends on:\n\n```javascript\nmoduleForModel('foo', 'Unit | Model | model', {\n  needs: ['validator:presence']\n});\n```"
        },
        "Advanced": {
            "name": "Advanced",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Usage",
            "namespace": "",
            "file": "addon/index.js",
            "line": 149,
            "description": "### Default Options\n\nDefault options can be specified over a set of validations for a given attribute. Local properties will always take precedence.\n\nInstead of doing the following:\n\n```javascript\nconst Validations = buildValidations({\n  username: [\n    validator('presence', {\n      presence: true,\n      description: 'Username'\n    }),\n    validator('length', {\n      min: 1,\n      description: 'Username'\n    }),\n    validator('my-custom-validator', {\n      description: 'A username'\n    })\n  ]\n});\n```\n\nWe can declare default options:\n\n```javascript\nconst Validations = buildValidations({\n  username: {\n    description: 'Username'\n    validators: [\n      validator('presence', true),\n      validator('length', {\n        min: 1\n      }),\n      validator('my-custom-validator', {\n        description: 'A username'\n      })\n    ]\n  },\n});\n```\n\nIn the above example, all the validators for username will have a description of `Username` except that of the `my-custom-validator` validator which will be `A username`.\n\n### Global Options\n\nIf you have  specific options you want to propagate through all your validation rules, you can do so by passing in a global options object.\nThis is ideal for when you have a dependent key that each validator requires such as the current locale from your i18n implementation, or\nyou want easily toggle your validations on/off. As of 3.x, all dependent keys must be prefixed with `model`.\n\n```javascript\nconst Validations = buildValidations(validationRules, globalOptions);\n```\n\n```javascript\nimport Ember from 'ember';\nimport { validator, buildValidations } from '@summit-electric-supply/ember-cp-validations';\n\nconst Validations = buildValidations({\n  firstName: {\n    description: 'First Name'\n    validators: [\n      validator('presence', {\n        presence: true,\n        dependentKeys: ['model.foo', 'model.bar']\n      })\n     ]\n   },\n  lastName: validator('presence', true)\n}, {\n  description: 'This field'\n  dependentKeys: ['model.i18n.locale'],\n  disabled: computed.readOnly('model.disableValidations')\n});\n```\n\nJust like in the default options, locale validator options will always take precedence over default options and default options will always take precedence\nover global options. This allows you to declare global rules while having the ability to override them in lower levels.\n\nThis rule does not apply to `dependentKeys`, instead they all are merged. In the example above, __firstName__'s dependentKeys will be\n`['model.i18n.locale', 'model.foo', 'model.bar']`\n\n### Computed Options\n\nAll options can also be Computed Properties. These CPs have access to the `model` and `attribute` that is associated with the validator.\n\nPlease note that the `message` option of a validator can also be a function with [the following signature](http://offirgolan.github.io/ember-cp-validations/docs/modules/Validators.html#message).\n\n```javascript\nconst Validations = buildValidations({\n  username: validator('length', {\n    disabled: Ember.computed.not('model.meta.username.isEnabled'),\n    min: Ember.computed.readOnly('model.meta.username.minLength'),\n    max: Ember.computed.readOnly('model.meta.username.maxLength'),\n    description: Ember.computed(function() {\n      // CPs have access to the `model` and `attribute`\n      return this.get('model').generateDescription(this.get('attribute'));\n    }).volatile() // Disable caching and force recompute on every get call\n  })\n});\n```\n\n### Nested Keys\n\nWhen declaring object validations (not including Ember Data models), it is possible to validate child objects from the parent object.\n\n```javascript\nimport Ember from 'ember';\nimport { validator, buildValidations } from '@summit-electric-supply/ember-cp-validations';\n\nconst Validations = buildValidations({\n  'acceptTerms': validator('inclusion', { in: [ true ] }),\n  'user.firstName': validator('presence', true),\n  'user.lastName': validator('presence', true),\n  'user.account.number': validator('number')\n});\n\nexport default Ember.Component.extend(Validations, {\n  acceptTerms: false,\n  user:  {\n    firstName: 'John',\n    lastName: 'Doe' ,\n    account: {\n      number: 123456,\n    }\n  },\n  isFormValid: Ember.computed.alias('validations.isValid'),\n});\n```"
        },
        "I18n Solutions": {
            "name": "I18n Solutions",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Usage",
            "namespace": "",
            "file": "addon/index.js",
            "line": 285,
            "description": "### [__Ember-Intl__](https://github.com/ember-intl/cp-validations)\n\n ```bash\n ember install @ember-intl/cp-validations\n ```\n\n### [__Ember-I18n__](https://github.com/jasonmit/ember-i18n-cp-validations)\n\n```bash\n ember install ember-i18n-cp-validations\n```"
        }
    },
    "classes": {
        "Result": {
            "name": "Result",
            "shortname": "Result",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validations",
            "namespace": "",
            "file": "addon/-private/result.js",
            "line": 17,
            "description": "__PRIVATE__"
        },
        "Error": {
            "name": "Error",
            "shortname": "Error",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validations",
            "namespace": "",
            "file": "addon/validations/error.js",
            "line": 3
        },
        "Factory": {
            "name": "Factory",
            "shortname": "Factory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validations",
            "namespace": "",
            "file": "addon/validations/factory.js",
            "line": 83
        },
        "ResultCollection": {
            "name": "ResultCollection",
            "shortname": "ResultCollection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validations",
            "namespace": "",
            "file": "addon/validations/result-collection.js",
            "line": 31
        },
        "Alias": {
            "name": "Alias",
            "shortname": "Alias",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/alias.js",
            "line": 6,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nCreates an alias between a single attribute's validations to another.\nThis copies all messages, errors, etc., to the current attribute as well as\nits validation state (isValid, isValidating, etc.)\n\n## Examples\n\n```javascript\nvalidator('alias', 'attribute')\nvalidator('alias', {\n  alias: 'attribute',\n  firstMessageOnly: true\n})\n```",
            "extends": "Base"
        },
        "Base": {
            "name": "Base",
            "shortname": "Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/base.js",
            "line": 22
        },
        "Custom": {
            "name": "Custom",
            "shortname": "Custom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/base.js",
            "line": 320,
            "description": "Creating custom validators is very simple. To generate a validator named `unique-username` in Ember CLI\n\n```bash\nember generate validator unique-username\n```\n\nThis will create the following files\n\n* `app/validators/unique-username.js`\n* `tests/unit/validators/unique-username-test.js`\n\n```javascript\n// app/validators/unique-username.js\n\nimport BaseValidator from '@summit-electric-supply/ember-cp-validations/validators/base';\n\nconst UniqueUsername = BaseValidator.extend({\n  validate(value, options, model, attribute) {\n    return true;\n  }\n});\n\nUniqueUsername.reopenClass({\n  getDependentsFor(attribute, options) {\n    return [];\n  }\n});\n\nexport default UniqueUsername;\n```\n\n**Side Note**: Before we continue, I would suggest checking out the documentation for the {{#crossLink 'Base'}}Base Validator{{/crossLink}}.\n\nIf you want to interact with the `store` within your validator, you can simply inject the service like you would a component.\nSince you have access to your model and the current value, you should be able to send the server the right information to determine if this username is unique.\n\n```javascript\n// app/validators/unique-username.js\n\nimport Ember from 'ember';\nimport BaseValidator from '@summit-electric-supply/ember-cp-validations/validators/base';\n\nconst UniqueUsername = BaseValidator.extend({\n  store: Ember.inject.service(),\n\n  validate(value, options, model, attribute) {\n    return this.get('store').findRecord('user', value).then((user) => {\n      if(user && user.id === value) {\n        let message = `The username '${value}' already exists.`;\n        let meta = user.get('meta');\n\n        if(options.showSuggestions && meta && meta.suggestions) {\n          message += \"What about one of the these: \" + meta.suggestions.join(', ');\n        }\n        return message;\n      } else {\n        return true;\n      }\n    })\n  }\n});\n```\n\n## Dependent Keys\n\nThere will be times when your validator will be dependent on some other property or object. Instead of having to\ninclude them in your option's `dependentKeys`, you can declare them in the static `getDependentsFor` hook. This hook\nreceives two parameters. The first is the `attribute` that this validator is being added to, and the second are the `options`\nthere were passed to this validator.\n\nFrom the above code sample:\n\n```javascript\n// app/validators/unique-username.js\n\nimport BaseValidator from '@summit-electric-supply/ember-cp-validations/validators/base';\n\nconst UniqueUsername = BaseValidator.extend({});\n\nUniqueUsername.reopenClass({\n  getDependentsFor(attribute, options) {\n    return [];\n  }\n});\n\nexport default UniqueUsername;\n```\n\nAll dependent keys are in reference to the model's `validations.attrs` object. So when you return `['username']`,\nit will add a dependent to `model.validations.attrs.username`. If you want to add a dependent on the model, your\nkey needs to be prefixed with `model`. So when you return `['model.username']`, it will add a dependent to `model.username` instead of `model.validations.attrs.username`.\nThis means that if you have a dependent on a service, that service must be injected into the model since returning `['model.myService.someProperty']`\nwill be interpreted as `model.myService.someProperty`.\n\n## Usage\n\nTo use our unique-username validator we just have to add it to the model definition\n\n```javascript\nconst Validations = buildValidations({\n  username: validator('unique-username', {\n    showSuggestions: true\n  }),\n});\n\nexport default DS.Model.extend(Validations, {\n  'username': DS.attr('string'),\n});\n```\n\n## Testing\nAs mentioned before, the generator created a unit test for your new custom validator.\n\n```javascript\n// tests/unit/validators/unique-username-test.js\n\nimport Ember from 'ember';\nimport { moduleFor, test } from 'ember-qunit';\n\nmoduleFor('validator:unique-username', 'Unit | Validator | unique-username', {\n    needs: ['validator:messages']\n});\n\ntest('it works', function(assert) {\n    const validator =  this.subject();\n    assert.ok(validator);\n});\n```\n\nA simple test for our validation method can be as such\n\n```javascript\ntest('username is unique', function(assert) {\n    assert.expect(1);\n\n    let validator =  this.subject();\n    let done = assert.async();\n\n    validator.validate('johndoe42').then((message) => {\n      assert.equal(message, true);\n      done();\n    });\n});\n```",
            "extends": "Base"
        },
        "Belongs To": {
            "name": "Belongs To",
            "shortname": "Belongs To",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/belongs-to.js",
            "line": 5,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nIdentifies a `belongs-to` relationship in an Ember Data Model or Ember.Object.\nThis is used to create a link to the validations object of the child model.\n\n_**Note:** Validations must exist on **both** models/objects_\n\n### Ember Model\n\n```javascript\n// model/users.js\n\nconst Validations = buildValidations({\n  details: validator('belongs-to')\n});\n\nexport default DS.Model.extend(Validations, {\n  'details': DS.belongsTo('user-detail')\n});\n```\n\n```javascript\n// model/user-details.js\n\nconst Validations = buildValidations({\n  firstName: validator('presence', true),\n  lastName: validator('presence', true)\n});\n\nexport default DS.Model.extend(Validations, {\n  \"firstName\": attr('string'),\n  \"lastName\": attr('string'),\n});\n```\n\n### Ember Object\n\n```javascript\n// model/users.js\n\nimport UserDetails from '../user-details';\n\nconst Validations = buildValidations({\n  details: validator('belongs-to')\n});\n\nexport default Ember.Object.extend(Validations, {\n  details: null,\n\n  init() {\n    this._super(...arguments);\n    let owner = Ember.getOwner(this);\n    this.set('details', UserDetails.create(owner.ownerInjection()));\n  }\n});\n```\n\nFrom our `user` model, we can now check any validation property on the `user-details` model.\n\n```javascript\nget(model, 'validations.attrs.details.isValid')\nget(model, 'validations.attrs.details.messages')\n```",
            "extends": "Base"
        },
        "Collection": {
            "name": "Collection",
            "shortname": "Collection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/collection.js",
            "line": 7,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nIf `true` validates that the given value is a valid collection and will add `<ATTRIBUTE>.[]` as a dependent key to the CP.\nIf `false`, validates that the given value is singular. Use this validator if you want validation to occur when the content of your collection changes.\n\n## Examples\n\n```javascript\nvalidator('collection', true)\nvalidator('collection', false)\nvalidator('collection', {\n  collection: true,\n  message: 'must be a collection'\n})\n```",
            "extends": "Base"
        },
        "Confirmation": {
            "name": "Confirmation",
            "shortname": "Confirmation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/confirmation.js",
            "line": 6,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nValidates that the attribute has the same value as the one of the declared attribute.\n\n## Examples\n\n```javascript\nemail: validator('format', {\n  type: 'email'\n})\nverifiedEmail: validator('confirmation', {\n  on: 'email',\n  message: 'Email addresses do not match'\n})\n```",
            "extends": "Base"
        },
        "Date": {
            "name": "Date",
            "shortname": "Date",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/date.js",
            "line": 6,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nValidate over a date range. Uses [MomentJS](http://momentjs.com/) for date mathematics and calculations.\n\n**Note**: MomentJS must be installed to be able to use this validator. The easiest way to do this is to install [ember-moment](https://github.com/stefanpenner/ember-moment)\n\n ## Examples\n\n If `before`, `onOrBefore`, `after`, or `onOrAfter` is set to **now**, the value given to the validator will be tested against the current date and time.\n\n```javascript\nvalidator('date', {\n  after: 'now',\n  before: '1/1/2020',\n  precision: 'day',\n  format: 'M/D/YYY',\n  errorFormat: 'M/D/YYY'\n})\n```",
            "extends": "Base"
        },
        "Dependent": {
            "name": "Dependent",
            "shortname": "Dependent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/dependent.js",
            "line": 7,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nDefines an attribute as valid only if its dependents are valid.\n\n## Example\n\n```javascript\n// Full name will only be valid if firstName and lastName are filled in\nvalidator('dependent', {\n  on: ['firstName', 'lastName']\n})\n```",
            "extends": "Base"
        },
        "DS Error": {
            "name": "DS Error",
            "shortname": "DS Error",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/ds-error.js",
            "line": 6,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nCreates a link between this library and Ember-Data's [DS.Errors](http://emberjs.com/api/data/classes/DS.Errors.html)\nto fetch the latest message for the given attribute.\n\n## Examples\n\n```javascript\nvalidator('ds-error')\n```",
            "extends": "Base"
        },
        "Exclusion": {
            "name": "Exclusion",
            "shortname": "Exclusion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/exclusion.js",
            "line": 6,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nValidates that the attributes’ values are not included in a given list. All comparisons are done using strict equality so type matters! For range, the value type is checked against both lower and upper bounds for type equality.\n\n## Examples:\n\n```javascript\nvalidator('exclusion', {\n  in: ['Admin', 'Super Admin']\n})\nvalidator('exclusion', {\n  range: [0, 5] // Cannot be between 0 (inclusive) to 5 (inclusive)\n})\n```",
            "extends": "Base"
        },
        "Format": {
            "name": "Format",
            "shortname": "Format",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/format.js",
            "line": 7,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nValidate over a predefined or custom regular expression.\n\n## Examples\n\n```javascript\nvalidator('format', {\n  type: 'email',\n  allowNonTld: true\n})\nvalidator('format', {\n  allowBlank: true,\n  type: 'phone'\n})\nvalidator('format', {\n  type: 'url'\n})\nvalidator('format', {\n  regex: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$/,\n  message: 'Password must include at least one upper case letter, one lower case letter, and a number'\n})\n```\n\nIf you do not want to use the predefined regex for a specific type, you can do something like this\n\n```javascript\nvalidator('format', {\n  type: 'email',\n  regex: /My Better Email Regexp/\n})\n```\n\nThis allows you to still keep the email error message but with your own custom regex.",
            "extends": "Base"
        },
        "Has Many": {
            "name": "Has Many",
            "shortname": "Has Many",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/has-many.js",
            "line": 5,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nIdentifies a `has-many` relationship in an Ember Data Model or Ember.Object.\nThis is used to create a validation collection of the `has-many` validations.\n\n_**Note:** Validations must exist on **all** models/objects_\n\n### Ember Models\n\n```javascript\n// model/users.js\n\nconst Validations = buildValidations({\n  friends: validator('has-many')\n});\n\nexport default DS.Model.extend(Validations, {\n  friends: DS.hasMany('user')\n});\n```\n\n### Ember Objects\n\n```javascript\n// model/users.js\n\nconst Validations = buildValidations({\n  friends: validator('has-many')\n});\n\nexport default Ember.Object.extend(Validations, {\n  friends: null\n});\n```\n\nFrom our `user` model, we can now check validation properties on the `friends` attribute.\n\n```javascript\nget(model, 'validations.attrs.friends.isValid')\nget(model, 'validations.attrs.friends.messages')\n```",
            "extends": "Base"
        },
        "Inclusion": {
            "name": "Inclusion",
            "shortname": "Inclusion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/inclusion.js",
            "line": 6,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nValidates that the attributes’ values are included in a given list. All comparisons are done using strict equality so type matters!\nFor range, the value type is checked against both lower and upper bounds for type equality.\n\n## Examples\n\n```javascript\nvalidator('inclusion', {\n  in: ['User', 'Admin']\n})\nvalidator('inclusion', {\n  range: [0, 5] // Must be between 0 (inclusive) to 5 (inclusive)\n})\n```\n\nBecause of the strict equality comparisons, you can use this validator in many different ways.\n\n```javascript\nvalidator('inclusion', {\n  in: ['Admin'] // Input must be equal to 'Admin'\n})\nvalidator('inclusion', {\n  range: [0, Infinity] // Input must be positive number\n})\nvalidator('inclusion', {\n  range: [-Infinity, Infinity] // Input must be a number\n})\n```",
            "extends": "Base"
        },
        "Inline": {
            "name": "Inline",
            "shortname": "Inline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "addon/validators/inline.js",
            "line": 5,
            "description": "Accepts a custom `validate` function.\n\n## Examples\n\n```javascript\nvalidator('inline', {\n  username: 'offirgolan',\n  validate(value, options, model, attribute) {\n    return value === options.username ?\n           true :\n           `Username must be ${options.username}`;\n  }\n});\n```",
            "extends": "Base"
        },
        "Length": {
            "name": "Length",
            "shortname": "Length",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/length.js",
            "line": 5,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nValidates the length of the attributes’ values.\n\n## Examples\n\n```javascript\nvalidator('length', {\n  is: 15\n})\nvalidator('length', {\n  min: 5,\n  max: 10\n})\n```",
            "extends": "Base"
        },
        "Messages": {
            "name": "Messages",
            "shortname": "Messages",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/messages.js",
            "line": 3,
            "description": "The default validation error messages are imported in your app's `validators` folder.\nIf you want to change or extend them, all you need to do is create a `messages.js` file under `app/validators`.\n\n```javascript\n// app/validators/messages.js\n\nimport Messages from '@summit-electric-supply/ember-cp-validations/validators/messages';\n\nexport default Messages.extend({\n  uniqueUsername: '{description} {username} already exists'\n});\n```\n\nWithin this object, you can overwrite the [default messages](https://github.com/offirgolan/ember-cp-validations/blob/master/addon/validators/messages.js) or create new messages just like in the example above.\nIf a message of a given type is not found, it will default to the `invalid` message.\nUsage examples can be found {{#crossLink \"Base/createErrorMessage:method\"}}here{{/crossLink}}"
        },
        "Number": {
            "name": "Number",
            "shortname": "Number",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/number.js",
            "line": 5,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nValidates that your attributes have only numeric values.\n\n## Examples\n\n```javascript\nvalidator('number') // Simple check if the value is a number\nvalidator('number', {\n  allowString: true,\n  integer: true,\n  gt: 5,\n  lte: 100\n})\n```",
            "extends": "Base"
        },
        "Presence": {
            "name": "Presence",
            "shortname": "Presence",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Validators",
            "namespace": "",
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/presence.js",
            "line": 7,
            "description": "<i class=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i> [See All Options](#method_validate)\n\nIf `true` validates that the given value is not empty, if `false`, validates that the given value is empty.\n\n## Examples\n\n```javascript\nvalidator('presence', true)\nvalidator('presence', false)\nvalidator('presence', {\n  presence: true,\n  message: 'should not be empty'\n})\n\nvalidator('presence', {\n  presence: true,\n  ignoreBlank: true,\n  message: 'should not be empty or consist only of spaces'\n})\n```",
            "extends": "Base"
        },
        "Ember": {
            "name": "Ember",
            "shortname": "Ember",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Usage",
            "namespace": ""
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "addon/-private/result.js",
            "line": 26,
            "itemtype": "property",
            "name": "model",
            "type": "{Object}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 32,
            "itemtype": "property",
            "name": "attribute",
            "type": "{String}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 38,
            "itemtype": "property",
            "name": "_promise",
            "async": 1,
            "access": "private",
            "tagname": "",
            "type": "{Promise}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 46,
            "description": "The validator that returned this result",
            "itemtype": "property",
            "name": "_validator",
            "access": "private",
            "tagname": "",
            "type": "{Validator}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 54,
            "description": "Determines if the _result object is readOnly.\n\nThis is needed because ResultCollections and global validation objects control their own\nstate via CPs",
            "itemtype": "property",
            "name": "_isReadOnly",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "type": "{Boolean}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 73,
            "itemtype": "property",
            "name": "isWarning",
            "readonly": "",
            "type": "{Boolean}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 80,
            "itemtype": "property",
            "name": "isValid",
            "readonly": "",
            "type": "{Boolean}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 87,
            "itemtype": "property",
            "name": "isInvalid",
            "readonly": "",
            "type": "{Boolean}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 94,
            "itemtype": "property",
            "name": "isValidating",
            "readonly": "",
            "type": "{Boolean}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 101,
            "itemtype": "property",
            "name": "isTruelyValid",
            "readonly": "",
            "type": "{Boolean}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 108,
            "itemtype": "property",
            "name": "isTruelyInvalid",
            "readonly": "",
            "type": "{Boolean}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 115,
            "itemtype": "property",
            "name": "isAsync",
            "readonly": "",
            "type": "{Boolean}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 122,
            "itemtype": "property",
            "name": "message",
            "readonly": "",
            "type": "{String}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 129,
            "itemtype": "property",
            "name": "messages",
            "readonly": "",
            "type": "{Array}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 136,
            "itemtype": "property",
            "name": "error",
            "readonly": "",
            "type": "{Object}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 143,
            "itemtype": "property",
            "name": "errors",
            "readonly": "",
            "type": "{Array}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 150,
            "itemtype": "property",
            "name": "warningMessage",
            "readonly": "",
            "type": "{String}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 157,
            "itemtype": "property",
            "name": "warningMessages",
            "readonly": "",
            "type": "{Array}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 164,
            "itemtype": "property",
            "name": "warning",
            "readonly": "",
            "type": "{Object}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 171,
            "itemtype": "property",
            "name": "warnings",
            "readonly": "",
            "type": "{Array}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 178,
            "description": "This hold all the logic for the above CPs. We do this so we can easily switch this object out with a different validations object",
            "itemtype": "property",
            "name": "_result",
            "access": "private",
            "tagname": "",
            "type": "{Result}",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 208,
            "description": "Update the current validation result object with the given value\n- If value is undefined or null, set isValid to false\n- If value is a validations object from a different model/object, set the _result object to the one given (belongs-to)\n- If value is a collection of result objects, create a Validation Result Collection and set that to the _result object (has-many)\n- If value is a string, set the message to the given string and set isValid to false\n- If value is a boolean, set isValid to result\n- If value is a pojo, update _result object with the information given",
            "itemtype": "method",
            "name": "update",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 249,
            "description": "Override the internal _result property.",
            "itemtype": "method",
            "name": "_overrideResult",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/-private/result.js",
            "line": 259,
            "description": "Promise handler",
            "itemtype": "method",
            "name": "_handlePromise",
            "access": "private",
            "tagname": "",
            "class": "Result",
            "module": "Validations"
        },
        {
            "file": "addon/helpers/v-get.js",
            "line": 4,
            "description": "Transform:\n (v-get model 'username' 'isValid') to (get (get (get (get model 'validations') 'attrs') 'username') 'isValid')\nOR\n (v-get model 'isValid') to (get (get model 'validations') 'isValid')",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "AST.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "AST.Node"
            },
            "class": "Error",
            "module": "Validations"
        },
        {
            "file": "addon/utils/cycle-breaker.js",
            "line": 1,
            "description": "Use Ember Meta to break cycles in the CP chains. Lets say we have a User model with a `friends` property that is a hasMany\nrelationship. If we have a user John and he has a friend Jane, that creates a two-way relationship. John is Jane's friends and vise\nversa. If we were to go down the CP chain and get validations for John's friends, it would go to Jane, then to Jane's friends, which\nwould point back to John. This method tracks which models have been already visited and breaks the cycle.",
            "class": "Error",
            "module": "Validations"
        },
        {
            "file": "addon/utils/deep-set.js",
            "line": 1,
            "description": "Assigns a value to an object via the given path while creating new objects if\nthe pathing requires it. If the given path is `foo.bar`, it will create a new object (obj.foo)\nand assign value to obj.foo.bar. If the given object is an Ember.Object, it will create new Ember.Objects.",
            "class": "Error",
            "module": "Validations"
        },
        {
            "file": "addon/utils/lookup-validator.js",
            "line": 1,
            "description": "Lookup a validator of a specific type on the owner",
            "params": [
                {
                    "name": "owner",
                    "description": "",
                    "type": "Ember.Owner"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "throws": {
                "description": "Validator not found",
                "type": "Error"
            },
            "return": {
                "description": "Validator class",
                "type": "Class"
            },
            "class": "Error",
            "module": "Validations"
        },
        {
            "file": "addon/utils/should-call-super.js",
            "line": 1,
            "description": "Checks if the give key exists on the object's super.\nIf so, we can successfully call the obj[key] _super\n\nCreated by @rwjblue",
            "class": "Error",
            "module": "Validations"
        },
        {
            "file": "addon/validations/error.js",
            "line": 9,
            "description": "The error validator type",
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "class": "Error",
            "module": "Validations"
        },
        {
            "file": "addon/validations/error.js",
            "line": 16,
            "description": "The error message",
            "itemtype": "property",
            "name": "message",
            "type": "{String}",
            "class": "Error",
            "module": "Validations"
        },
        {
            "file": "addon/validations/error.js",
            "line": 23,
            "description": "The attribute that the error belongs to",
            "itemtype": "property",
            "name": "attribute",
            "type": "{String}",
            "class": "Error",
            "module": "Validations"
        },
        {
            "file": "addon/validations/error.js",
            "line": 30,
            "description": "The parent attribute that the error belongs to",
            "itemtype": "property",
            "name": "parentAttribute",
            "type": "{String}",
            "class": "Error",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 88,
            "description": "Top level method that will ultimately return a mixin with all CP validations",
            "itemtype": "method",
            "name": "buildValidations",
            "params": [
                {
                    "name": "validations",
                    "description": "Validation rules",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Mixin"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 147,
            "description": "Validation rules can be created with default and global options\n{\n  description: 'Username',\n  validators: [...]\n}\n\nThis method generate the default options pojo, applies it to each validation rule, and flattens the object",
            "itemtype": "method",
            "name": "normalizeOptions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "validations",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 188,
            "description": "Creates the validations class that will become `model.validations`.\n  - Setup parent validation inheritance\n  - Normalize nested keys (i.e. 'details.dob') into objects (i.e { details: { dob: validator() }})\n  - Merge normalized validations with parent\n  - Create global CPs (i.e. 'isValid', 'messages', etc...)",
            "itemtype": "method",
            "name": "createValidationsClass",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "inheritedValidationsClass",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "validations",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Object"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 296,
            "description": "Creates the `attrs` class which holds all the CP logic\n\n```javascript\nmodel.get('validations.attrs.username');\nmodel.get('validations.attrs.nested.object.attribute');\n```",
            "itemtype": "method",
            "name": "createAttrsClass",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "validatableAttributes",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "validationRules",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Object"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 397,
            "description": "CP generator for the given attribute",
            "itemtype": "method",
            "name": "createCPValidationFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "Since the CPs are created once per class on the first initialization,\n                               this is the first model that was instantiated",
                    "type": "Object"
                },
                {
                    "name": "validations",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A computed property which is a ResultCollection",
                "type": "Ember.ComputedProperty"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 448,
            "description": "Check if a collection of validations have an option\nequal to the given value",
            "itemtype": "method",
            "name": "hasOption",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "validations",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "option",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 472,
            "description": "Generates the validation results for a given attribute and validators. If a\ngiven validator should be validated, it calls upon the validate callback to retrieve\nthe result.",
            "itemtype": "method",
            "name": "generateValidationResultsFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "validators",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "validate",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "opts",
                    "description": "- disableDebounceCache {Boolean}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 538,
            "description": "Create a mixin that will have all the top level CPs under the validations object.\nThese are computed collections on different properties of each attribute validations CP",
            "itemtype": "method",
            "name": "createTopLevelPropsMixin",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "validations",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 589,
            "description": "CP dependency generator for a give attribute depending on its relationships",
            "itemtype": "method",
            "name": "getCPDependentKeysFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "Since the CPs are created once per class on the first initialization,\n                               this is the first model that was instantiated",
                    "type": "Object"
                },
                {
                    "name": "validations",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Unique list of dependencies",
                "type": "Array"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 643,
            "description": "Extract all dependentKeys from any property that is a CP",
            "itemtype": "method",
            "name": "extractOptionsDependentKeys",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "dependentKeys",
                "type": "Array"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 667,
            "description": "A handler used to create ValidationResult object from values returned from a validator",
            "itemtype": "method",
            "name": "validationReturnValueHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "ValidationResult"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 697,
            "description": "Get validators for the give attribute. If they are not in the cache, then create them.",
            "itemtype": "method",
            "name": "getValidatorsFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 713,
            "description": "Get debounced validation cache for the given attribute. If it doesn't exist, create a new one.",
            "itemtype": "method",
            "name": "getValidatorCacheFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Map"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 732,
            "description": "Create validators for the give attribute and store them in a cache",
            "itemtype": "method",
            "name": "createValidatorsFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 769,
            "description": "Call the passed resolve method. This is needed as run.debounce expects a\nstatic method to work properly.",
            "itemtype": "method",
            "name": "resolveDebounce",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "resolve",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 781,
            "description": "```javascript\nmodel.validate({ on: ['username', 'email'] }).then(({ m, validations }) => {\n  validations.get('isValid'); // true or false\n  validations.get('isValidating'); // false\n\n  let usernameValidations = m.get('validations.attrs.username');\n  usernameValidations.get('isValid') // true or false\n});\n```",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "on",
                            "description": "Only validate the given attributes. If empty, will validate over all validatable attribute",
                            "type": "Array"
                        },
                        {
                            "name": "excludes",
                            "description": "Exclude validation on the given attributes",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "isAsync",
                    "description": "If `false`, will get all validations and will error if an async validations is found.\n                             If `true`, will get all validations and wrap them in a promise hash",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Promise if isAsync is true, object if isAsync is false",
                "type": "Promise or Object"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 852,
            "description": "A functional approach to check if a given attribute on a model is valid independently of the\nmodel attribute's validations. This method will always return a promise which will then resolve\nto a {{#crossLink \"ResultCollection\"}}{{/crossLink}}.\n\n```javascript\nmodel.validateAttribute('username', 'offirgolan').then(({ m, validations }) => {\n  validations.get('isValid'); // true or false\n  validations.get('isValidating'); // false\n});\n```",
            "itemtype": "method",
            "name": "validateAttribute",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "async": 1,
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/factory.js",
            "line": 905,
            "description": "```javascript\nlet { m, validations } = model.validateSync();\nvalidations.get('isValid') // true or false\n```",
            "itemtype": "method",
            "name": "validateSync",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "on",
                            "description": "Only validate the given attributes. If empty, will validate over all validatable attribute",
                            "type": "Array"
                        },
                        {
                            "name": "excludes",
                            "description": "Exclude validation on the given attributes",
                            "type": "Array"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Factory",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 41,
            "description": "The attribute that this collection belongs to",
            "itemtype": "property",
            "name": "attribute",
            "type": "{String}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 49,
            "description": "```javascript\n// Examples\nget(user, 'validations.isInvalid')\nget(user, 'validations.attrs.username.isInvalid')\n```",
            "itemtype": "property",
            "name": "isInvalid",
            "default": "false",
            "readonly": "",
            "type": "{Boolean}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 63,
            "description": "```javascript\n// Examples\nget(user, 'validations.isValid')\nget(user, 'validations.attrs.username.isValid')\n```",
            "itemtype": "property",
            "name": "isValid",
            "default": "true",
            "readonly": "",
            "type": "{Boolean}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 77,
            "description": "This property is toggled only if there is an async validation\n\n```javascript\n// Examples\nget(user, 'validations.isValidating')\nget(user, 'validations.attrs.username.isValidating')\n```",
            "itemtype": "property",
            "name": "isValidating",
            "default": "false",
            "readonly": "",
            "type": "{Boolean}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 93,
            "description": "Will be true only if isValid is `true` and isValidating is `false`\n\n```javascript\n// Examples\nget(user, 'validations.isTruelyValid')\nget(user, 'validations.attrs.username.isTruelyValid')\n```",
            "itemtype": "property",
            "name": "isTruelyValid",
            "default": "true",
            "readonly": "",
            "type": "{Boolean}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 109,
            "description": "Will be true only if isValid is `false` and isValidating is `false`\n\n```javascript\n// Examples\nget(user, 'validations.isTruelyInvalid')\nget(user, 'validations.attrs.username.isTruelyInvalid')\n```",
            "itemtype": "property",
            "name": "isTruelyInvalid",
            "default": "false",
            "readonly": "",
            "type": "{Boolean}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 125,
            "description": "Will be `true` only if a validation returns a promise\n\n```javascript\n// Examples\nget(user, 'validations.isAsync')\nget(user, 'validations.attrs.username.isAsync')\n```",
            "itemtype": "property",
            "name": "isAsync",
            "default": "false",
            "readonly": "",
            "type": "{Boolean}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 141,
            "description": "A collection of all error messages on the object in question\n\n```javascript\n// Examples\nget(user, 'validations.messages')\nget(user, 'validations.attrs.username.messages')\n```",
            "itemtype": "property",
            "name": "messages",
            "readonly": "",
            "type": "{Array}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 161,
            "description": "An alias to the first message in the messages collection.\n\n```javascript\n// Example\nget(user, 'validations.message')\nget(user, 'validations.attrs.username.message')\n```",
            "itemtype": "property",
            "name": "message",
            "readonly": "",
            "type": "{String}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 176,
            "description": "Will be `true` if there are warnings in the collection.\n\n```javascript\n// Example\nget(user, 'validations.hasWarnings')\nget(user, 'validations.attrs.username.hasWarnings')\n```",
            "itemtype": "property",
            "name": "hasWarnings",
            "readonly": "",
            "type": "{String}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 191,
            "description": "A collection of all warning messages on the object in question\n\n```javascript\n// Examples\nget(user, 'validations.warningMessages')\nget(user, 'validations.attrs.username.warningMessages')\n```",
            "itemtype": "property",
            "name": "warningMessages",
            "readonly": "",
            "type": "{Array}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 211,
            "description": "An alias to the first message in the warningMessages collection.\n\n```javascript\n// Example\nget(user, 'validations.warningMessage')\nget(user, 'validations.attrs.username.warningMessage')\n```",
            "itemtype": "property",
            "name": "warningMessage",
            "readonly": "",
            "type": "{String}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 226,
            "description": "A collection of all {{#crossLink \"Error\"}}Warnings{{/crossLink}} on the object in question.\nEach warning object includes the warning message and it's associated attribute name.\n\n```javascript\n// Example\nget(user, 'validations.warnings')\nget(user, 'validations.attrs.username.warnings')\n```",
            "itemtype": "property",
            "name": "warnings",
            "readonly": "",
            "type": "{Array}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 248,
            "description": "An alias to the first {{#crossLink \"Warning\"}}{{/crossLink}} in the warnings collection.\n\n```javascript\n// Example\nget(user, 'validations.warning')\nget(user, 'validations.attrs.username.warning')\n```",
            "itemtype": "property",
            "name": "warning",
            "readonly": "",
            "type": "{Error}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 263,
            "description": "A collection of all {{#crossLink \"Error\"}}Errors{{/crossLink}} on the object in question.\nEach error object includes the error message and it's associated attribute name.\n\n```javascript\n// Example\nget(user, 'validations.errors')\nget(user, 'validations.attrs.username.errors')\n```",
            "itemtype": "property",
            "name": "errors",
            "readonly": "",
            "type": "{Array}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 285,
            "description": "An alias to the first {{#crossLink \"Error\"}}{{/crossLink}} in the errors collection.\n\n```javascript\n// Example\nget(user, 'validations.error')\nget(user, 'validations.attrs.username.error')\n```",
            "itemtype": "property",
            "name": "error",
            "readonly": "",
            "type": "{Error}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 300,
            "description": "All built options of the validators associated with the results in this collection grouped by validator type\n\n```javascript\n// Given the following validators\n{\n  username: [\n    validator('presence', true),\n    validator('length', { max: 15 }),\n    validator('format', { regex: /foo/ }),\n    validator('format', { regex: /bar/ }),\n  ]\n}\n```\n\n```js\nget(user, 'validations.attrs.username.options')\n```\n\nThe above will return the following\n```js\n{\n  'presence': { presence: true},\n  'length': { max: 15 },\n  'regex': [{ regex: /foo/ }, { regex: /bar/ }]\n}\n```",
            "itemtype": "property",
            "name": "options",
            "readonly": "",
            "type": "{Object}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 336,
            "itemtype": "property",
            "name": "_promise",
            "async": 1,
            "access": "private",
            "tagname": "",
            "type": "{Promise}",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 357,
            "itemtype": "property",
            "name": "_contentResults",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 366,
            "itemtype": "property",
            "name": "_contentValidators",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validations/result-collection.js",
            "line": 386,
            "description": "Used by the `options` property to create a hash from the `content` that is grouped by validator type.\nIf there is more than 1 of a type, it groups it into an array of option objects.",
            "class": "ResultCollection",
            "module": "Validations"
        },
        {
            "file": "addon/validators/alias.js",
            "line": 28,
            "description": "Normalized options passed in.\n```js\nvalidator('alias', 'attribute')\n// Becomes\nvalidator('alias', {\n  alias: 'attribute'\n})\n```",
            "itemtype": "method",
            "name": "buildOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "defaultOptions",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "globalOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Alias",
            "module": "Validators"
        },
        {
            "file": "addon/validators/alias.js",
            "line": 55,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "alias",
                            "description": "The attribute to alias",
                            "type": "String"
                        },
                        {
                            "name": "firstMessageOnly",
                            "description": "If true, only returns the first error message of the\n                                          aliased attribute and will not include validation state",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Alias",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 27,
            "description": "Options passed in to the validator when defined in the model",
            "itemtype": "property",
            "name": "options",
            "type": "{Object}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 34,
            "description": "Default validation options for this specific attribute",
            "itemtype": "property",
            "name": "defaultOptions",
            "type": "{Object}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 41,
            "description": "Global validation options for this model",
            "itemtype": "property",
            "name": "globalOptions",
            "type": "{Object}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 48,
            "description": "Model instance",
            "itemtype": "property",
            "name": "model",
            "type": "{Model}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 55,
            "description": "Attributed name of the model this validator is attached to",
            "itemtype": "property",
            "name": "attribute",
            "type": "{String}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 62,
            "description": "Error message object. Populated by validators/messages",
            "itemtype": "property",
            "name": "errorMessages",
            "type": "{Object}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 69,
            "itemtype": "property",
            "name": "isWarning",
            "type": "{Boolean}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 75,
            "description": "Validator type",
            "itemtype": "property",
            "name": "_type",
            "access": "private",
            "tagname": "",
            "type": "{String}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 83,
            "description": "Validators cache used by `test` api",
            "itemtype": "property",
            "name": "_testValidatorCache",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 115,
            "description": "Build options hook. Merges default options into options object.\nThis method gets called on init and is the ideal place to normalize your options.\nThe [presence validator](https://github.com/offirgolan/ember-cp-validations/blob/master/addon/validators/presence.js) is a good example to checkout",
            "itemtype": "method",
            "name": "buildOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "defaultOptions",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "globalOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 140,
            "description": "Used to retrieve the value to validate.\nThis method gets called right before `validate` and the returned value\ngets passed into the validate method.",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The current value of `model[attribute]`"
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 154,
            "description": "Wrapper method to `value` that passes the necessary parameters",
            "itemtype": "method",
            "name": "getValue",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "value",
                "type": "Mixed"
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 166,
            "description": "The validate method is where all of your logic should go.\nIt will get passed in the current value of the attribute this validator is attached to.\nWithin the validator object, you will have access to the following properties:",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "The current value of the attribute",
                    "type": "Mixed"
                },
                {
                    "name": "options",
                    "description": "The built and processed options",
                    "type": "Object"
                },
                {
                    "name": "model",
                    "description": "The current model being evaluated",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "The current attribute being evaluated",
                    "type": "String"
                }
            ],
            "return": {
                "description": "One of the following types:\n- `Boolean`:  `true` if the current value passed the validation\n- `String`: The error message\n- `Promise`: A promise that will either resolve or reject, and will finally return either `true` or the final error message string."
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 185,
            "description": "Used by all pre-defined validators to build an error message that is present\nin `validators/message` or declared in your i18n solution.\n\nIf we extended our default messages to include `uniqueUsername: '{username} already exists'`,\nwe can use this method to generate our error message.\n\n```javascript\nvalidate(value, options) {\n  const exists = false;\n\n  // check with server if username exists...\n\n  if(exists) {\n    // The username key on the options object will be used to create the error message\n    options.username = value;\n    return this.createErrorMessage('uniqueUsername', value, options);\n  }\n\n  return true;\n}\n```\n\nIf we input `johndoe` and that username already exists, the returned message would be `'johndoe already exists'`.",
            "itemtype": "method",
            "name": "createErrorMessage",
            "params": [
                {
                    "name": "type",
                    "description": "The type of message template to use",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Current value being evaluated",
                    "type": "Mixed"
                },
                {
                    "name": "options",
                    "description": "Validator built and processed options (used as the message string context)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The generated message",
                "type": "String"
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 242,
            "description": "Easily compose complicated validations by using this method to validate\nagainst other validators.\n\n```javascript\nvalidate(value, options, ...args) {\n  let result = this.test('presence', value, { presence: true }, ...args);\n\n  if (!result.isValid) {\n    return result.message;\n  }\n\n  // You can even test against your own custom validators\n  result = this.test('my-validator', value, { foo: 'bar' }, ...args);\n\n  if (!result.isValid) {\n    return result.message;\n  }\n\n  result = this.test('number', value, { integer: true }, ...args);\n\n  // You can easily override the error message by returning your own.\n  if (!result.isValid) {\n     return 'This value must be an integer!';\n   }\n\n  // Add custom logic...\n\n  return true;\n}\n```",
            "itemtype": "method",
            "name": "test",
            "params": [
                {
                    "name": "type",
                    "description": "The validator type (e.x. 'presence', 'length', etc.)\n                         The following types are unsupported:\n                           'alias', 'belongs-to', 'dependent', 'has-many'",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "The arguments to pass through to the validator",
                    "type": "...args"
                }
            ],
            "return": {
                "description": "The test result object which will contain `isValid`\n                         and `message`. If the validator is async, then the\n                         return value will be a promise.",
                "type": "Object"
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/base.js",
            "line": 304,
            "description": "Generate the needed dependent keys for this validator",
            "itemtype": "method",
            "name": "getDependentsFor",
            "static": 1,
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "dependent keys",
                "type": "Array"
            },
            "class": "Base",
            "module": "Validators"
        },
        {
            "file": "addon/validators/collection.js",
            "line": 28,
            "description": "Normalized options passed in.\n```js\nvalidator('collection', true)\n// Becomes\nvalidator('collection', {\n  collection: true\n})\n```",
            "itemtype": "method",
            "name": "buildOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "defaultOptions",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "globalOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Collection",
            "module": "Validators"
        },
        {
            "file": "addon/validators/dependent.js",
            "line": 26,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "on",
                            "description": "Attributes this field is dependent on",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Dependent",
            "module": "Validators"
        },
        {
            "file": "addon/validators/inline.js",
            "line": 26,
            "description": "Override the validator's `validate` method with the one that was\npassed in via the options.",
            "itemtype": "method",
            "name": "buildOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "defaultOptions",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "globalOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Inline",
            "module": "Validators"
        },
        {
            "file": "addon/validators/presence.js",
            "line": 32,
            "description": "Normalized options passed in.\n```js\nvalidator('presence', true)\n// Becomes\nvalidator('presence', {\n  presence: true\n})\n```",
            "itemtype": "method",
            "name": "buildOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "defaultOptions",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "globalOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Presence",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/utils/can-invoke.js",
            "line": 1,
            "description": "Checks to see if the `methodName` exists on the `obj`.\n```javascript\nlet foo = { bar: function() { return 'bar'; }, baz: null };\nEmber.canInvoke(foo, 'bar'); // true\nEmber.canInvoke(foo, 'baz'); // false\nEmber.canInvoke(foo, 'bat'); // false\n```",
            "itemtype": "method",
            "name": "canInvoke",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check for the method",
                    "type": "Object"
                },
                {
                    "name": "methodName",
                    "description": "The method name to check for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember",
            "module": "Usage"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/collection.js",
            "line": 12,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "collection",
                            "description": "",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Collection",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/confirmation.js",
            "line": 11,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "on",
                            "description": "The attribute to confirm against",
                            "type": "String"
                        },
                        {
                            "name": "allowBlank",
                            "description": "If true, skips validation if the value is empty",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Confirmation",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/date.js",
            "line": 11,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "allowBlank",
                            "description": "If true, skips validation if the value is empty",
                            "type": "Boolean"
                        },
                        {
                            "name": "before",
                            "description": "The specified date must be before this date",
                            "type": "String"
                        },
                        {
                            "name": "onOrBefore",
                            "description": "The specified date must be on or before this date",
                            "type": "String"
                        },
                        {
                            "name": "after",
                            "description": "The specified date must be after this date",
                            "type": "String"
                        },
                        {
                            "name": "onOrAfter",
                            "description": "The specified date must be on or after this date",
                            "type": "String"
                        },
                        {
                            "name": "precision",
                            "description": "Limit the comparison check to a specific granularity.\n                                  Possible Options: [`year`, `month`, `week`, `day`, `hour`, `minute`, `second`].",
                            "type": "String"
                        },
                        {
                            "name": "format",
                            "description": "Input value date format",
                            "type": "String"
                        },
                        {
                            "name": "errorFormat",
                            "description": "Error output date format. Defaults to `MMM Do, YYYY`",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Date",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/ds-error.js",
            "line": 11,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "DS Error",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/exclusion.js",
            "line": 11,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "allowBlank",
                            "description": "If true, skips validation if the value is empty",
                            "type": "Boolean"
                        },
                        {
                            "name": "in",
                            "description": "The list of values this attribute should not be",
                            "type": "Array"
                        },
                        {
                            "name": "range",
                            "description": "The range in which the attribute's value should not reside in",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Exclusion",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/format.js",
            "line": 12,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "allowBlank",
                            "description": "If true, skips validation if the value is empty",
                            "type": "Boolean"
                        },
                        {
                            "name": "type",
                            "description": "Can be the one of the following options [`email`, `phone`, `url`]",
                            "type": "String"
                        },
                        {
                            "name": "inverse",
                            "description": "If true, pass if the value doesn't match the given regex / type",
                            "type": "String"
                        },
                        {
                            "name": "regex",
                            "description": "The regular expression to test against",
                            "type": "Regex"
                        },
                        {
                            "name": "allowNonTld",
                            "description": "If true, the predefined regular expression `email` allows non top-level domains",
                            "type": "Boolean"
                        },
                        {
                            "name": "minTldLength",
                            "description": "The min length of the top-level domain on the predefined `email` regular expression",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Format",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/inclusion.js",
            "line": 11,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "allowBlank",
                            "description": "If true, skips validation if the value is empty",
                            "type": "Boolean"
                        },
                        {
                            "name": "in",
                            "description": "The list of values this attribute could be",
                            "type": "Array"
                        },
                        {
                            "name": "range",
                            "description": "The range in which the attribute's value should reside in",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Inclusion",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/length.js",
            "line": 10,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "allowNone",
                            "description": "If true, skips validation if the value is null or undefined. __Default: true__",
                            "type": "Boolean"
                        },
                        {
                            "name": "allowBlank",
                            "description": "If true, skips validation if the value is empty",
                            "type": "Boolean"
                        },
                        {
                            "name": "useBetweenMessage",
                            "description": "If true, uses the between error message when `max` and `min` are both set",
                            "type": "Boolean"
                        },
                        {
                            "name": "is",
                            "description": "The exact length the value can be",
                            "type": "Number"
                        },
                        {
                            "name": "min",
                            "description": "The minimum length the value can be",
                            "type": "Number"
                        },
                        {
                            "name": "max",
                            "description": "The maximum length the value can be",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Length",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/messages.js",
            "line": 8,
            "description": "Regex for matching error message placeholders",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_regex",
            "type": "{RegExp}",
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/messages.js",
            "line": 16,
            "description": "Default attribute description if one isnt passed into a validator's options",
            "itemtype": "property",
            "name": "defaultDescription",
            "type": "{String}",
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/messages.js",
            "line": 23,
            "description": "Get a description for a specific attribute. This is a hook\nfor i18n solutions to retrieve attribute descriptions from a translation",
            "itemtype": "method",
            "name": "getDescriptionFor",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/messages.js",
            "line": 35,
            "description": "Get a message with a given type",
            "itemtype": "method",
            "name": "getMessageFor",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/messages.js",
            "line": 46,
            "description": "Regex replace all placeholders with their given context",
            "itemtype": "method",
            "name": "formatMessage",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/messages.js",
            "line": 62,
            "description": "Default validation error message strings",
            "class": "Messages",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/number.js",
            "line": 10,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "allowBlank",
                            "description": "If true, skips validation if the value is empty",
                            "type": "Boolean"
                        },
                        {
                            "name": "allowNone",
                            "description": "If true, skips validation if the value is null or undefined. __Default: true__",
                            "type": "Boolean"
                        },
                        {
                            "name": "allowString",
                            "description": "If true, validator will accept string representation of a number",
                            "type": "Boolean"
                        },
                        {
                            "name": "integer",
                            "description": "Number must be an integer",
                            "type": "Boolean"
                        },
                        {
                            "name": "positive",
                            "description": "Number must be greater than or equal to 0",
                            "type": "Boolean"
                        },
                        {
                            "name": "odd",
                            "description": "Number must be odd",
                            "type": "Boolean"
                        },
                        {
                            "name": "even",
                            "description": "Number must be even",
                            "type": "Boolean"
                        },
                        {
                            "name": "is",
                            "description": "Number must be equal to this value",
                            "type": "Number"
                        },
                        {
                            "name": "lt",
                            "description": "Number must be less than this value",
                            "type": "Number"
                        },
                        {
                            "name": "lte",
                            "description": "Number must be less than or equal to this value",
                            "type": "Number"
                        },
                        {
                            "name": "gt",
                            "description": "Number must be greater than this value",
                            "type": "Number"
                        },
                        {
                            "name": "gte",
                            "description": "Number must be greater than or equal to this value",
                            "type": "Number"
                        },
                        {
                            "name": "multipleOf",
                            "description": "Number must be a multiple of this value",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Number",
            "module": "Validators"
        },
        {
            "file": "node_modules/@summit-electric-supply/ember-validators/addon/presence.js",
            "line": 12,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "presence",
                            "description": "If true validates that the given value is not empty,\n                                  if false, validates that the given value is empty.",
                            "type": "Boolean"
                        },
                        {
                            "name": "ignoreBlank",
                            "description": "If true, treats an empty or whitespace string as not present",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Presence",
            "module": "Validators"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " addon/validations/factory.js:448"
        },
        {
            "message": "Missing item type\nTransform:\n (v-get model 'username' 'isValid') to (get (get (get (get model 'validations') 'attrs') 'username') 'isValid')\nOR\n (v-get model 'isValid') to (get (get model 'validations') 'isValid')",
            "line": " addon/helpers/v-get.js:4"
        },
        {
            "message": "Missing item type\nUse Ember Meta to break cycles in the CP chains. Lets say we have a User model with a `friends` property that is a hasMany\nrelationship. If we have a user John and he has a friend Jane, that creates a two-way relationship. John is Jane's friends and vise\nversa. If we were to go down the CP chain and get validations for John's friends, it would go to Jane, then to Jane's friends, which\nwould point back to John. This method tracks which models have been already visited and breaks the cycle.",
            "line": " addon/utils/cycle-breaker.js:1"
        },
        {
            "message": "Missing item type\nAssigns a value to an object via the given path while creating new objects if\nthe pathing requires it. If the given path is `foo.bar`, it will create a new object (obj.foo)\nand assign value to obj.foo.bar. If the given object is an Ember.Object, it will create new Ember.Objects.",
            "line": " addon/utils/deep-set.js:1"
        },
        {
            "message": "Missing item type\nLookup a validator of a specific type on the owner",
            "line": " addon/utils/lookup-validator.js:1"
        },
        {
            "message": "Missing item type\nChecks if the give key exists on the object's super.\nIf so, we can successfully call the obj[key] _super\n\nCreated by @rwjblue",
            "line": " addon/utils/should-call-super.js:1"
        },
        {
            "message": "Missing item type\nUsed by the `options` property to create a hash from the `content` that is grouped by validator type.\nIf there is more than 1 of a type, it groups it into an array of option objects.",
            "line": " addon/validations/result-collection.js:386"
        },
        {
            "message": "Missing item type\nDefault validation error message strings",
            "line": " node_modules/@summit-electric-supply/ember-validators/addon/messages.js:62"
        }
    ]
}